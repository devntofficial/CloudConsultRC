@page "/availability-scheduler"
@using CloudConsult.UI.Blazor.Models.Consultation
@inject Radzen.DialogService DialogService

<style>
    .rz-scheduler-nav-prev-next > .rz-button, .rz-state-active
    {
        background-color: #43a047ff !important;
    }
</style>

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Availability" Data=@appointments StartProperty="Start" EndProperty="End"
        TextProperty="Text" SelectedIndex="2"
        SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>

@code {
    RadzenScheduler<Availability> scheduler;
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    IList<Availability> appointments = new List<Availability>
    {
        new Availability { Start = DateTime.Today.AddDays(-2), End = DateTime.Today.AddDays(-2), Text = "Birthday" },
        new Availability { Start = DateTime.Today.AddDays(-11), End = DateTime.Today.AddDays(-10), Text = "Day off" },
        new Availability { Start = DateTime.Today.AddDays(-10), End = DateTime.Today.AddDays(-8), Text = "Work from home" },
        new Availability { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(12), Text = "Online meeting" },
        new Availability { Start = DateTime.Today.AddHours(10), End = DateTime.Today.AddHours(13), Text = "Skype call" },
        new Availability { Start = DateTime.Today.AddHours(14), End = DateTime.Today.AddHours(14).AddMinutes(30), Text = "Dentist appointment" },
        new Availability { Start = DateTime.Today.AddDays(1), End = DateTime.Today.AddDays(12), Text = "Vacation" },
    };

    void OnSlotRender(SchedulerSlotRenderEventArgs args) 
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

        // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        

        //Availability data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment",
        //    new Dictionary<string, object> { { "Start", args.Start }, { "End", args.End } });

        //if (data != null)
        //{
        //    appointments.Add(data);
        //    // Either call the Reload method or reassign the Data property of the Scheduler
        //}
        await scheduler.Reload();
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Availability> args)
    {
        //await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> { { "Appointment", args.Data } });

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Availability> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }
}