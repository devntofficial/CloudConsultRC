version: '3.4'
networks:
  cloud-consult:
    external: true
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  kafka_ui_data:
    driver: local
  mongodb_data:
    driver: local
  mssql_data:
    driver: local
  elasticsearch_data_01:
    driver: local
  elasticsearch_data_02:
    driver: local
  prometheus_data: {}
  grafana_data: {}
services:
  prometheus:
    image: prom/prometheus
    restart: always
    container_name: Prometheus
    networks:
      - cloud-consult
    volumes:
      - ./prometheus:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - alertmanager:alertmanager

  alertmanager:
    image: prom/alertmanager
    restart: always
    container_name: Prometheus-Alert-Manager
    networks:
      - cloud-consult
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  grafana:
    image: grafana/grafana
    restart: always
    container_name: Grafana
    networks:
      - cloud-consult
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    links:
      - prometheus:prometheus
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
  elasticsearch01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: Elasticsearch-Cluster-Node-01
    environment:
      - node.name=elasticsearch01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch02
      - cluster.initial_master_nodes=elasticsearch01,elasticsearch02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data_01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - cloud-consult
  elasticsearch02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    container_name: Elasticsearch-Cluster-Node-02
    environment:
      - node.name=elasticsearch02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=elasticsearch01
      - cluster.initial_master_nodes=elasticsearch01,elasticsearch02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch_data_02:/usr/share/elasticsearch/data
    ports:
      - "9200"
    networks:
      - cloud-consult
  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.1
    container_name: Kibana-Server
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch01:9200
      ELASTICSEARCH_HOSTS: '["http://elasticsearch01:9200","http://elasticsearch02:9200"]'
    networks:
      - cloud-consult
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.7
    container_name: Zookeeper
    restart: always
    networks:
      - cloud-consult
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: Kafka-UI
    networks:
      - cloud-consult
    ports:
      - "8081:8080"
    restart: always
    volumes:
      - "kafka_ui_data:/kafka-ui"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafkaserver:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  kafkaserver:
    image: docker.io/bitnami/kafka:3
    container_name: Apache-Kafka
    restart: always
    networks:
      - cloud-consult
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafkaserver:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
  mssqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: Microsoft-Sql-Server-2019
    restart: always
    networks:
      - cloud-consult
    ports:
      - 1433:1433
    volumes:
      - mssql_data:/var/lib/mssqlql/data
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Itachi@123
  mongodbserver:
    image: mongo:latest
    container_name: MongoDb-Server
    restart: always
    networks:
      - cloud-consult
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db